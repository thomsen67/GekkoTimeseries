//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Gekko
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Settings : DataSet {
        
        private MainDataTable tableMain;
        
        public Settings() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Settings(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Main"] != null)) {
                    this.Tables.Add(new MainDataTable(ds.Tables["Main"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MainDataTable Main {
            get {
                return this.tableMain;
            }
        }
        
        public override DataSet Clone() {
            Settings cln = ((Settings)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Main"] != null)) {
                this.Tables.Add(new MainDataTable(ds.Tables["Main"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMain = ((MainDataTable)(this.Tables["Main"]));
            if ((this.tableMain != null)) {
                this.tableMain.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Settings";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Settings.xsd";
            this.Locale = new System.Globalization.CultureInfo(Globals.languageEnUS);
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMain = new MainDataTable();
            this.Tables.Add(this.tableMain);
        }
        
        private bool ShouldSerializeMain() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MainRowChangeEventHandler(object sender, MainRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MainDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUsername;
            
            private DataColumn columnPIN;
            
            private DataColumn columnAdmin;
            
            internal MainDataTable() : 
                    base("Main") {
                this.InitClass();
            }
            
            internal MainDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            internal DataColumn PINColumn {
                get {
                    return this.columnPIN;
                }
            }
            
            internal DataColumn AdminColumn {
                get {
                    return this.columnAdmin;
                }
            }
            
            public MainRow this[int index] {
                get {
                    return ((MainRow)(this.Rows[index]));
                }
            }
            
            public event MainRowChangeEventHandler MainRowChanged;
            
            public event MainRowChangeEventHandler MainRowChanging;
            
            public event MainRowChangeEventHandler MainRowDeleted;
            
            public event MainRowChangeEventHandler MainRowDeleting;
            
            public void AddMainRow(MainRow row) {
                this.Rows.Add(row);
            }
            
            public MainRow AddMainRow(string Username, int PIN, bool Admin) {
                MainRow rowMainRow = ((MainRow)(this.NewRow()));
                rowMainRow.ItemArray = new object[] {
                        Username,
                        PIN,
                        Admin};
                this.Rows.Add(rowMainRow);
                return rowMainRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MainDataTable cln = ((MainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MainDataTable();
            }
            
            internal void InitVars() {
                this.columnUsername = this.Columns["Username"];
                this.columnPIN = this.Columns["PIN"];
                this.columnAdmin = this.Columns["Admin"];
            }
            
            private void InitClass() {
                this.columnUsername = new DataColumn("Username", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUsername);
                this.columnPIN = new DataColumn("PIN", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPIN);
                this.columnAdmin = new DataColumn("Admin", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdmin);
            }
            
            public MainRow NewMainRow() {
                return ((MainRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MainRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MainRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MainRowChanged != null)) {
                    this.MainRowChanged(this, new MainRowChangeEvent(((MainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MainRowChanging != null)) {
                    this.MainRowChanging(this, new MainRowChangeEvent(((MainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MainRowDeleted != null)) {
                    this.MainRowDeleted(this, new MainRowChangeEvent(((MainRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MainRowDeleting != null)) {
                    this.MainRowDeleting(this, new MainRowChangeEvent(((MainRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMainRow(MainRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MainRow : DataRow {
            
            private MainDataTable tableMain;
            
            internal MainRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMain = ((MainDataTable)(this.Table));
            }
            
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableMain.UsernameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMain.UsernameColumn] = value;
                }
            }
            
            public int PIN {
                get {
                    try {
                        return ((int)(this[this.tableMain.PINColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMain.PINColumn] = value;
                }
            }
            
            public bool Admin {
                get {
                    try {
                        return ((bool)(this[this.tableMain.AdminColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMain.AdminColumn] = value;
                }
            }
            
            public bool IsUsernameNull() {
                return this.IsNull(this.tableMain.UsernameColumn);
            }
            
            public void SetUsernameNull() {
                this[this.tableMain.UsernameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPINNull() {
                return this.IsNull(this.tableMain.PINColumn);
            }
            
            public void SetPINNull() {
                this[this.tableMain.PINColumn] = System.Convert.DBNull;
            }
            
            public bool IsAdminNull() {
                return this.IsNull(this.tableMain.AdminColumn);
            }
            
            public void SetAdminNull() {
                this[this.tableMain.AdminColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MainRowChangeEvent : EventArgs {
            
            private MainRow eventRow;
            
            private DataRowAction eventAction;
            
            public MainRowChangeEvent(MainRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
